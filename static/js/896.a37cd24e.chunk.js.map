{"version":3,"file":"static/js/896.a37cd24e.chunk.js","mappings":"iNAQA,EANe,SAAC,GAAD,IAAGA,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACb,4BACE,kBAAOC,KAAK,OAAOF,MAAOA,EAAOC,SAAUA,O,SCH/C,EAAsB,yBCGP,SAASE,EAAT,GAAoC,IAAbC,EAAY,EAAZA,SACpC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KAEMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAEC,cAAlBJ,EAAR,EAAQA,KAAMR,EAAd,EAAcA,MAEd,OAAQQ,GACN,IAAK,OACHC,EAAQT,GACR,MAEF,IAAK,SACHO,EAAUP,KAcVa,EAAQ,WACZJ,EAAQ,IACRF,EAAU,KAGZ,OACE,kBAAMH,SAZa,SAAAO,GACnBA,EAAEG,iBACFV,EAAS,CAAEI,KAAAA,EAAMF,OAAAA,IACjBO,KASA,WACE,4BACE,kCACA,kBACEX,KAAK,OACLM,KAAK,OACLO,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRjB,MAAOQ,EACPP,SAAUS,QAGd,4BACE,oCACA,kBACER,KAAK,MACLM,KAAK,SACLO,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRjB,MAAOM,EACPL,SAAUS,QAGd,mBAAQQ,UAAWC,EAAnB,4BC7DN,MAAuB,0BAAvB,EAAwD,0BAAxD,EAAwF,yBCEzE,SAASC,EAAT,GAA8C,IAAvBC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,SAC9C,OACE,eAAIJ,UAAWC,EAAf,SACGE,EAASE,KAAI,SAAAC,GAAE,OACd,yBACE,0BACE,kBAAMN,UAAWC,EAAjB,UACGK,EAAGhB,KADN,KACcgB,EAAGlB,WAEjB,mBACEJ,KAAK,SACLuB,QAAS,kBAAMH,EAASE,EAAGE,KAC3BR,UAAWC,EAHb,wBALKK,EAAGE,S,wBCAL,SAASC,IACtB,OACE,SAACC,EAAA,EAAD,WACE,iBAAKV,UAAWC,EAAAA,EAAAA,iBAAhB,WACE,uCACA,SAAChB,EAAD,KACA,uCACA,SAAC,EAAD,KACA,SAACiB,EAAD,W,mBCdR,KAAgB,KAAO,mBAAmB,QAAU,sBAAsB,MAAQ,oBAAoB,iBAAmB,+BAA+B,OAAS,qBAAqB,MAAQ,oBAAoB,IAAM,kBAAkB,MAAQ,sB,iECGnO,SAASS,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,IAAIG,EAAY,MAAPJ,EAAc,KAAyB,qBAAXK,QAA0BL,EAAIK,OAAOC,WAAaN,EAAI,cAE3F,GAAU,MAANI,EAAJ,CACA,IAIIG,EAAIC,EAJJC,EAAO,GACPC,GAAK,EACLC,GAAK,EAIT,IACE,IAAKP,EAAKA,EAAGQ,KAAKZ,KAAQU,GAAMH,EAAKH,EAAGS,QAAQC,QAC9CL,EAAKM,KAAKR,EAAGrC,QAET+B,GAAKQ,EAAKO,SAAWf,GAH4BS,GAAK,IAK5D,MAAOO,GACPN,GAAK,EACLH,EAAKS,EACL,QACA,IACOP,GAAsB,MAAhBN,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIO,EAAI,MAAMH,GAIlB,OAAOC,GFtBuB,CAAqBT,EAAKC,KAAM,EAAAiB,EAAA,GAA2BlB,EAAKC,IGLjF,WACb,MAAM,IAAIkB,UAAU,6IHIgF","sources":["components/Filter/Filter.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.js","views/ContactsView.js","webpack://goit-react-hw-08-phonebook/./src/views/View.module.css?0f9b","../javascript/esm|C:/Users/TVOYO/Наташа документы/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../javascript/esm|C:/Users/TVOYO/Наташа документы/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../javascript/esm|C:/Users/TVOYO/Наташа документы/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../javascript/esm|C:/Users/TVOYO/Наташа документы/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"],"sourcesContent":["import React from 'react';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nexport default Filter;\n\n// Filter.propTypes = {\n//   value: PropTypes.string.isRequired,\n//   onChange: PropTypes.func.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"ContactForm_btn__3jw8b\"};","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport s from './ContactForm.module.css';\n\nexport default function ContactForm({ onSubmit }) {\n  const [number, setNumber] = useState('');\n  const [name, setName] = useState('');\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <h2>Name</h2>\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleInputChange}\n        />\n      </div>\n      <div>\n        <h2>Number</h2>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleInputChange}\n        />\n      </div>\n      <button className={s.btn}>Add contact</button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\n// export default class ContactForm extends Component {\n//   state = {\n//     number: '',\n//     name: '',\n//   };\n\n//   handleInputChange = e => {\n//     const { name, value } = e.currentTarget;\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = e => {\n//     e.preventDefault();\n//     this.props.onSubmit(this.state);\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n\n//   render() {\n//     return (\n//       <form onSubmit={this.handleSubmit}>\n//         <div>\n//           <h2>Name</h2>\n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={this.state.name}\n//             onChange={this.handleInputChange}\n//           />\n//         </div>\n//         <div>\n//           <h2>Number</h2>\n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={this.state.number}\n//             onChange={this.handleInputChange}\n//           />\n//         </div>\n//         <button className={s.btn}>Add contact</button>\n//       </form>\n//     );\n//   }\n// }\n\n// ContactForm.propTypes = {\n//   onSubmit: PropTypes.func.isRequired,\n// };\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__EC2oN\",\"text\":\"ContactList_text__bpl6T\",\"btn\":\"ContactList_btn__YNMJl\"};","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nexport default function ContactList({ contacts, onDelete }) {\n  return (\n    <ol className={s.list}>\n      {contacts.map(el => (\n        <li key={el.id}>\n          <p>\n            <span className={s.text}>\n              {el.name}: {el.number}\n            </span>\n            <button\n              type=\"button\"\n              onClick={() => onDelete(el.id)}\n              className={s.btn}\n            >\n              Delete\n            </button>\n          </p>\n        </li>\n      ))}\n    </ol>\n  );\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n","import Filter from '../components/Filter/Filter';\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Container from '../components/Container/Container';\r\nimport s from './View.module.css';\r\n\r\n\r\nexport default function ContactsView() {\r\n  return (\r\n    <Container>\r\n      <div className={s.phoneBookWrapper}>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2>Contacts </h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </div>\r\n    </Container>\r\n  );\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"View_form__FRBWj\",\"heading\":\"View_heading__BX8Wa\",\"label\":\"View_label__570gG\",\"phoneBookWrapper\":\"View_phoneBookWrapper__5bmeE\",\"button\":\"View_button__9YAev\",\"title\":\"View_title__enMI6\",\"img\":\"View_img__0ldfM\",\"thumb\":\"View_thumb__12GXR\"};","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["value","onChange","type","ContactForm","onSubmit","useState","number","setNumber","name","setName","handleInputChange","e","currentTarget","reset","preventDefault","pattern","title","required","className","s","ContactList","contacts","onDelete","map","el","onClick","id","ContactsView","Container","_slicedToArray","arr","i","Array","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","call","next","done","push","length","err","unsupportedIterableToArray","TypeError"],"sourceRoot":""}